version: "3.8"

services:
  animals:
    build:
      context: animals
      dockerfile: Dockerfile
    container_name: application2
    ports:
      - "127.0.0.1:3008:3008"
    # depends_on:
    #   - sqlite
    restart: on-failure
    environment:
      TZ: "Europe/Moscow"
    # healthcheck:
    #   test: ["CMD", "curl", "127.0.0.1:3008/api/healthcheck"]
    #   interval: 5s
    #   timeout: 3s
    #   retries: 2
    #   start_period: 5s
    # volumes:
    #   - ./animals/prisma:/app/prisma
    #   - ./../database:/app/data/database.db

  birds:
    build:
      context: birds
      dockerfile: Dockerfile
    container_name: application1
    depends_on:
      - postgres
    ports:
      - "127.0.0.1:3007:3007"
    restart: on-failure
    environment:
      TZ: "Europe/Moscow"
    # healthcheck:
    #   test: ["CMD", "curl", "127.0.0.1:3007/api/healthcheck"]
    #   interval: 5s
    #   timeout: 3s
    #   retries: 2
    #   start_period: 5s

  postgres:
    build:
      context: birds/postgres-db
      dockerfile: Dockerfile
    container_name: postgres_container
    volumes:
      - database_volume:/var/lib/postgresql/data
    ports:
      - "127.0.0.1:5432:5432"
    environment:
      TZ: "Europe/Moscow"
      POSTGRES_DB: "${NEXT_PUBLIC_DB_NAME_DEV}"
      POSTGRES_USER: "${NEXT_PUBLIC_DB_USER_DEV}"
      POSTGRES_PASSWORD: "${NEXT_PUBLIC_DB_PASSWORD_DEV}"
      PGDATA: "/var/lib/postgresql/data/pgdata"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${NEXT_PUBLIC_DB_USER_DEV} -d ${NEXT_PUBLIC_DB_NAME_DEV}",
        ]
      interval: 5s
      timeout: 3s
      retries: 2
      start_period: 5s

  # reverse proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      # - ./birds/public/temporary:/opt/files
      # - ./log/report:/opt/report
      # # - ./.htpasswd:/opt/.htpasswd
      - ./nginx_config/nginx.conf:/etc/nginx/nginx.conf
      # - ./log/nginx:/var/log/nginx
    environment:
      - TZ=Europe/Moscow
    depends_on:
      - birds
      - animals
      - postgres
    healthcheck:
      test: ["CMD", "curl", "--silent", "--fail", "http://localhost:80/health"]
      interval: 5s
      timeout: 3s
      retries: 2
      start_period: 5s

volumes:
  database_volume:


# sqlite:
#   container_name: sqllite_container
#   image: alpine:latest
#   build:
#     context: sqlite
#     dockerfile: Dockerfile
#   volumes:
#     - ./../database.db:/app/data/database.db
